## Motivation

Mr. Zapp recommend to write a RESTful API on a dedicated port.

## Get Ready

For now, you should have ran the `4350app` `web2py` app on an Ubuntu instance and can access it through  `http://[public dns]` and have read https://github.com/umbruner/4350/wiki/Working-on-web2py-applications-(permission-access-stuff)

Another web2py app `4350api` is located at `/home/www-data/web2py/applications/4350api/`

## EC2 side

Add an inbound rule `TCP port 8274` to `Security Group`

## nginx side

Change this file /etc/nginx/sites-available/web2py with sudo to:

```
server {
        listen 8274;

        location / {
               proxy_pass http://127.0.0.1:8001/4350api/;
               proxy_set_header  X-Real-IP  $remote_addr;
        }
}

server {
        listen 80;

        location / {
               proxy_pass http://127.0.0.1:8001/4350app/;
               proxy_set_header  X-Real-IP  $remote_addr;
        }
}

server {
        listen 127.0.0.1:8001;

        location / {
               uwsgi_pass      127.0.0.1:9001;
               include         uwsgi_params;
               uwsgi_param     UWSGI_SCHEME $scheme;
               uwsgi_param     SERVER_SOFTWARE    nginx/$nginx_version;
        }
}

server {
        listen 443;

        ssl                     on;
        ssl_certificate         /etc/nginx/ssl/web2py.crt;
        ssl_certificate_key     /etc/nginx/ssl/web2py.key;

        location / {
                uwsgi_pass      127.0.0.1:9001;
                include         uwsgi_params;
                uwsgi_param     UWSGI_SCHEME $scheme;
                uwsgi_param     SERVER_SOFTWARE    nginx/$nginx_version;
        }

}
```

## web2py side

Change this file `/home/www-data/web2py/routes.py` to:

```
routes_out = (
  ('/4350app/(?P<any>.*)', '/\g<any>'),
  ('/4350api/(?P<any>.*)', '/\g<any>'),
)
```

## reload uwsgi & nginx

```
sudo /etc/init.d/uwsgi reload
sudo /etc/init.d/nginx reload
```

## check

 - `http://[your public dns]/` for `4350app`
 - `http://[your public dns]:8274/` for `4350app`